What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates a hidden empty directory, .git. This directory stores the metadata about the history of the repository since it was created. This is what makes it a git repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area serves as a intermediate area for the user to add new items/changes to be tracked before proceeding to commit them, giving the user more control. The entire bundle of the staging area is what git commits when the user types the command. The working directory is simple the directory which the user is working on. The repository is where the git metadata is kept, keeping track of the history of the files.

How can you use the staging area to make sure you have one commit per logical
change?

	You can check the status via 'git status' command to see the files in the staging area. You can also use the command 'git diff --staged' to compare the staging area and the most recent commit. This will assist in figuring out how many changes were made since the last commit that are ready to be commited. This is where you can ensure only one commit per logical change is being followed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you want to test new experimental features, change some code that you don't want to keep as part of the master branch. Branches help by letting you create seperate tracks (branches) from the main one (master) to allow you to experiment and develop freely without impacting the original branch in a simple and efficient manner.

How do the diagrams help you visualize the branch structure?

	Diagrams help to keep track of which branches contain which commits. The diagrams start with the oldest commit and progress towards the most recent commit, while also displaying other branches that were spun off from the branch in question.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together combines both branches commit history into one branch. The representation on the diagram shows two branches coming together on a new node. It is done this way to visualy display how the new branch is able to access both of its parent branches' respective commits. Since it has two parent arrows to each respective branch, which in turn have their own arrow to their respective parent and so on. When we run 'git log' on the new resulting branch, we can see all the commits from both branches in chronological order.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Pros - It combines the differences between two branches with one simple command
	Pros - When a merge conflict occurs, git identifies the lines where the branches being merged differ within the troublesome file, making it easier for the user to find where they should start comparing and contrasting. It also makes it so you have one file to look at instead of having to open two files side by side and comparing
	Cons - Merging has no intelligence when differences within the same file happen. Some merge conflicts maybe intuitive and simple for the user, while git will still raise it regardless

